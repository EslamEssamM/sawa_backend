components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        customId:
          type: string
          description: A unique, potentially custom ID assigned to the user.
        email:
          type: string
          format: email
        name:
          type: string
        avatar:
          type: string
          description: URL to the user's avatar image.
        frame:
          type: string
          description: URL to the user's profile frame.
        country:
          type: string
        friends:
          type: array
          items:
            type: string
            description: List of friends' user IDs.
        followers:
          type: integer
          description: Number of followers the user has.
        following:
          type: integer
          description: Number of users this user is following.
        level:
          type: integer
          description: The user's level within the app.
        credits:
          type: number
          description: The number of credits the user has.
        credits_agency:
          type: boolean
          description: Indicates if the user is an agency.
        host_agency:
          type: boolean
          description: Indicates if the user is a host agency.
        is_host:
          type: boolean
          description: Indicates if the user is a host.
        role:
          type: string
          enum: [user, admin]
        isEmailVerified:
          type: boolean
          description: Indicates if the user's email has been verified.
      example:
        id: special123
        customId: user456
        email: fake@example.com
        name: fake name
        avatar: http://example.com/avatar.jpg
        frame: http://example.com/frame.png
        country: US
        friends: [user789, user321]
        followers: 150
        following: 200
        level: 5
        credits: 1000
        credits_agency: true
        host_agency: false
        is_host: true
        role: user
        isEmailVerified: false
      
    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
